\documentclass{article}[12pt]

%--------------Packages------------------------------
\usepackage[utf8]{inputenc} %Pour encoder du texte en français
\usepackage[francais]{babel} %Pour encoder du texte en français
\usepackage{graphicx} %pour inclure des images
\usepackage{changepage}
\usepackage{version} % permet d'utiliser l'environnement comment
\graphicspath{{./figures/}} %repertoire images
\usepackage{listings} %si on veut afficher du code, le code doit se trouver dans un dossier "codes" 					  %lui même dans le même répertoire que ce fichier tex
\usepackage{color} %nécessaire pour changer les couleurs du highlighting du code
\usepackage{amsmath,amssymb}%pour des maths au cas où
\usepackage{array,multirow,makecell}%Pour manipuler les tableaux
\usepackage{url} %pour utiliser les liens hypertextes
\usepackage{hyperref} %pour utiliser les liens hypertextes
\usepackage{float}
\newlength{\offsetpage}
\setlength{\offsetpage}{2.0cm}
\newenvironment{widepage}{\begin{adjustwidth}{-\offsetpage}{-\offsetpage}%
    \addtolength{\textwidth}{2\offsetpage}}%
{\end{adjustwidth}}

\newcommand{\Java}[2]{
	\begin{itemize}
    	\item[]\lstinputlisting[caption=#2,label=#1]{#1.java}
	\end{itemize}
}
% ---------- Document ------------ %
\begin{document}

\input{page_de_garde.tex}

\tableofcontents%table des matières
\newpage
\section{Introduction}
Interfaces du noyau, ils sont écrit et utilisés en C (Ils peuvent également être utilisé dans d'autres langages). Il y en a un nombre finis dans le noyau Unix. (Le point d'entrée du noyau est unique, chaque appel système est un des branchements de ce switch). Il en exite différents types :
\begin{itemize}
	\item IO
    \item File management
    \item Protection
    \item Processes
    \item Misc
\end{itemize}
\paragraph{Problèmes de portabilité : } Les programmes utilisant directement les appels systèmes ne sont pas des standard du langage C, sont des programmes C "Unix", ne sont pas portable entre les différents types de Unix. (Problème avec les appels systèmes : les fichiers en-têtes, ainsi que le type des arguments). Afin d'éviter ce genre de soucis, utiliser une directive de compilation (CPP).
\paragraph{Types de données des primitives sytèmes : } (permet de cacher les détails d'implémentation, définit au sein de <sys/types.h>)
\paragraph{Traitement des erreurs :} tous les appels systèmes retournent -1 en cas d'erreur. De ce fait le code de retour d'un appel système doit toujours être vérifié. (On peut également utiliser errno (<errno.h>) ainsi que perror
\paragraph{Opérations I/O : } Unix fournit une interface uniforme sur des ressources telles que :
\begin{itemize}
	\item Fichiers
	\item Terminaux
	\item Pipes
	\item "Tapes"
	\item "Network Sockets"
\end{itemize}
Les ressources sont identifiées par un entier appelé "file descriptor" (il s'agit d'une abstraction du programme afin d'accéder à une ressource). Il faut également savoir que les appels systèmes ne peuvent pas être bufferisées (Chaque appel système implique une opération au niveau du noyau ainsi qu'au niveau de l'appareil).
\section{File Descriptor}
Les fichiers ouverts sont désignés par un "file descriptor". Ils sont obtenus à l'aide des opérations open(), creat(), socket(). Pour chaque processus le noyau maintient une table des fichiers ouverts. Il existe trois "file descriptor" réservés au système : 
\begin{itemize}
	\item \emph{0} : Entrée Standard
	\item \emph{1} : Sortie Standard
	\item \emph{2} : Sortie d'erreur
\end{itemize}
\paragraph{Les fichiers : }
Les fichiers sont vus comme des séquences de bytes (pas d'enregistrement, les blocs physiques ne sont pas visibles). L'offset du fichier courant "tight" au "file descriptor". Les blocs d'appareils sont vus comme des séquences de blocs (l'entiereté des blocs sont lus/écrits en une fois).
\section{Standard I/O Library}
Interface uniforme permettant d'effectuer des opérations d'I/O (Il s'agit d'une interface efficace pour une programmation de haut niveau, fonctionnant avec les streams et permettant un système de buffer de haut niveau (Attention, les Appels Systèmes coûte très cher)) de manière très simple (un seul fichier à inclure (#include <stdio.h>)).
\paragraph{Les Streams : }
Similaire au "file descriptor", ils désignent les appareils (Ils existent bien entendus des streams prédéfinis de base (stdin, stdout, stderr), et ils sont alloués dynamiquement(un appel à malloc n'est pas requis, la fonction fopen s'en chargeant pour nous)).
\paragraph{User-level buffering : } la sortie n'est pas synchronisée (afin de pallier à cela on pourrait utiliser le système de "flush" (fflush, setbuf)). De plus les streams peuvant être détruit à l'aide de fclose().
\paragraph{Fonctions d'entrée}
\begin{itemize}
	\item int fgetc(FILE *stream);
	\item char *fgets(char *s, int size, FILE *stream);
	\item int getc(FILE *stream);
	\item int getchar(void);
	\item char *gets(char *s);
	\item int ungetc(int c, FILE *stream);
	\item scanf(char * format, ptr1, ptr2);
	\item fscanf(FILE * ioptr, char * format, ptr1, ptr2);
	\item sscanf(char * inbuf, char * format, &arg1, &arg2);
	\item strtok 
\end{itemize}   
Attention à un eventuel buffer overflow (il faut toujours vérifier la taille de ce que l'on reçoit, gets est d'ailleurs à éviter).
\paragraph{Fonctions de sortie}
\begin{itemize}
	\item int fputc(int c, FILE *stream);
	\item int fputs(const char *s, FILE *stream);
	\item int putc(int c, FILE *stream);
	\item int putchar(int c);
	\item int puts(const char *s);
	\item printf(char * format, arg1, arg2);
	\item fprintf(FILE * ioptr, char * format, arg1, arg2);
	\item sprintf(char * outbuf, char * format, arg1, arg2); 
\end{itemize}
\paragraph{Les bonnes pratiques de programmation : } il vaut mieux utiliser fgets afin de lire les lignes entrées. Il faut vérifier si un input est vide. Il vaut mieux utiliser sscanf afin de décoder les lignes entrées. Il faut utiliser strtok afin de recevoir un token à partir d'un input.
\section{Redirection}
\paragraph{Limite des Ressources} Les ressources peuvent être limitées au niveau du shell (ulimit -aS pour une "soft limit" et ulimit -aH pour une "hard limit").
\paragraph{User kernel ops "mapping" :} pour chaque commande/operation au niveau de l'utilisateur il y en a un équivalent au niveau du noyau.
\paragraph{Implémenter une redirection :} fermer l'entrée/sortie standard ouvrir un fichier d'entrée/sortie (open() renvoie le plus petit "file descriptor" disponible). Il fqut faire attention car certains problèmes peuvent survenir (l'appareil originel pointé par fd=0 est fermé, par la suite fd=0 est remplacé par "in", le fichier originel perdus est le clavier), la solution à cela est d'utiliser int dup(int fd) qui permet une dupplication du "file descriptor".
\paragraph{Mécanismes d'entrées/sorties : } 
\begin{itemize}
	\item \emph{Mécanismes d'entrées/sorties basiques UNIX : } les données sont lues/écrites depuis les fichiers par un processus. Les i/o sont vus commes des séquences de bytes non-structurées.
	\item \emph{Mécanismes d'entrées/sorties mappés en mémoire : } les objets externes sont mappés dans la mémoire virtuelle du processus.
\end{itemize} 
\section{Locks}
creat() et unlink() peuvent être utilisés afin de créer des cadenas (Locks) (while (creat("lockfile", 0) < 0) sleep(); unlink("lockfile")). Il faut faire attention car cela peut générer une erreur (le orphan lockfile). Il faut savoir que de nombreux problèmes apparaissent lorsque de multiples processus accèdent à la même donnée simultanément. (Pour cela on peut protéger les données à l'aide de cadenas, ces cadenas peuvent être implémentés de bien des manières mais ils doivent être atomiques et sont conseillé et non obligatoire).
\section{Processus}
Un processus est un programme en cours d'exécution. (Un programme est donc un objet statique (un exécutable dans le système de fichier), le processus quant à lui est un objet dynamique (il changera durant l'exécution)).
\paragraph{Définition d'un processus : } Un processus est un programme en cours d'exécution. Un processus contient des données en mémoire dont :
\begin{itemize}
	\item \emph{Du texte : } les instructions qui devront être exécutées.
	\item \emph{Des données globales : } initialisées ou non.
	\item \emph{Des données locales : } placées sur la pile.
	\item \emph{Un Heap : } de la mémoire libre pour les appels à la fonction malloc.
	\item \emph{Un environnement d'exécution :} tant pour le programme (statut, ...) que pour le système.
	\item \emph{Des variables d'environements : } Il s'agit de couples de clé-valeur qui peuvent être accédées par le processus tout comme par ses enfants.
\end{itemize}
\paragraph{Les variables d'environnement : } Un processus garde ses variables d'environnement et les paramètres de l'utilisateur définissent des variables d'environnement. Il s'agit de couple clé-valeur. On peut y accéder à partir d'un programme utilisateur (getenv()).
# ------------------------------------------- Appels Systemes --------------------------------------------------------------
\section{Appels Systèmes}
\subsection{Open()}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/types.h>
	\item #include <stat.h>
	\item #include <fcntl.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int open(const char * path, int flags, mode_t mode);
	\item int open(const char * path, int flags);
\end{itemize}
\paragraph{Remarques : }
Ouvre les fichiers en écriture ou en lecture. Retourne soit le "file descriptor" soit -1 (en cas d'erreur). Le chemin, "Path", est une chaîne de cractères désignant la ressource dans le système de fichiers. Pour l'argument flags celui-ci peut prendre les valeurs de :
\begin{itemize}
	\item O_RDONLY : ouvrir en lecture seulement.
	\item O_WRONLY : ouvrir en écriture seulement.
	\item O_RDWR : ouvrir en lecture et en écriture.
	\item O_CREAT : crée le fichier si il n'existe pas.
	\item O_APPEND : Place le pointeur sur EOF (permet d'écrire à la suite du contenu du fichier).
	\item O_TRUNC : Si le fichier existe, le remplace.
	\item O_EXCL : Crée le fichier d'erreur si il y en a.
\end{itemize}
Le mode est un argument utilisé avec O_CREAT (Il s'agit du mode de fichier Unix). Les erreur quant à elles peuvent être spécifiées par errno.
\subsection{Creat}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/types.h>
	\item #include <stat.h>
	\item #include <fcntl.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int creat(const char * path, mode_t mode); => Pour les fichiers
	\item int mkdir(const char * path, mode_t mode); => Pour les dossiers
	\item int mknod(const char * path, mode_t mode, dev_t dev); => Pour les fichiers spéciaux
\end{itemize}
\subsection{Read()}
\paragraph{Include : }
\begin{itemize}
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}q
	\item ssize_t read(int fd, void * buf, size_t len);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{fd : } "file descriptor" du fichier dans lequel il faut lire. (Il peut s'agir d'un fichier "standard" tout comme un substitut d'un pipe ou d'un network socket).
	\item \emph{buf : } adresse du pointeur pour lequel l'input doit être copié.
	\item \emph{len : } Nombre maximum de bytes à lire.
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{ret : } le nombre de bytes effectivement lus.
	\item \emph{0 : } La fin de fichier est atteinte.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Le retour peut (et est souvent) plus petit que la longueur attendue. Il faut donc être préparé à lire moins de données que ce qui était attendu. 
\subsection{Write}
\paragraph{Include : }
\begin{itemize}
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item ssize_t write(int fd, void * buf, size_t len);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{fd : } "file descriptor" du fichier dans lequel il faut écrire. (Il peut s'agir d'un fichier "standard" tout comme un substitut d'un pipe ou d'un network socket).
	\item \emph{buf : } adresse du pointeur pour lequel l'output doit être écrit.
	\item \emph{len : } Nombre maximum de bytes à écrire.
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{ret : } le nombre de bytes effectivement lus.
	\item \emph{0 : } La fin de fichier est atteinte.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Le retour peut (et est souvent) plus petit que la longueur attendue. Il faut donc être préparé à lire moins de données que ce qui était attendu. 
\subsection{Lseek()}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/types.h>
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item off_t lseek(int fd, int offset, off_t whence);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{fd : } "file descriptor" du fichier ouvert. (Il peut s'agir d'un fichier "standard" tout comme un substitut d'un pipe ou d'un network socket).
	\item \emph{offset : } Nombre de bytes qui doivent être déplacés (évités) par le pointeur.
	\item \emph{whence : } point de départ (SEEK_SET : début du fichier, SEEK_CUR : à partir de la position courante, SEEk_END à partir de la fin du fichier).
\end{itemize}
\subsection{Ioctl()}
Pour toutes les autres opérations I/O.
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/mtio.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int ioctl(int fd, MTIOCTOP, (struct mtop *) mt_cmd);
\end{itemize}
\subsection{Close()}
Permet de dissocier l'entier du descripteur de fichier. Il retourne 0 (en cas de succès) ou -1 (en cas d'erreur). Il faut savoir que tous les fichiers sont fermés lors de la fermeture du programme.
\subsection{Dup()}
\paragraph{Remarques : } int fd2 = dup(int fd1), fd2 est une dupplication de fd1. fd2 partage le même fichier d'entrée que fd1 (Par cela on entend que fd1 et fd2 partage les même drapeaux statut, le même mode d'accès tout comme le même offset du fichier courant). fd2 sera le plus petit "file descriptor" disponible. fd1 pourra être fermé, par contre l'appel à dup peut échouer (errno : EBADF, EMFILE).
\subsection{Dup2()}
Dup2() est une opération atomique permettant de regrouper close(fd2) ainsi que fd2 = dup(fd1).
\subsection{Mmap()}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/types.h>
	\item #include <sys/mman.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}q
	\item caddr_t mmap(caddr_t addr, size_t len, int prot, int fd, int off);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{addr : } devrait être 0.
	\item \emph{len : } Nombre de bytes à mettre en mémoire.
	\item \emph{prot : } Type d'accès(Peut être soit : PROT_READ, PROT_WRITE, PROT_EXEC, PROT_NONE).
	\item \emph{fd : } "File descriptor" à mettre en mémoire.
	\item \emph{off : } Origine de la map dans fd.
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{ret : } Retourne le pointeur de base permettant d'accéder aux données.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Le fichier doit être ouvert, plusieurs processus peuvent mettre en mémoire le même fichier, mmap est utilisé par UNIX afin de partager les librairies.
\subsection{Munmap()}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/types.h>
	\item #include <sys/mman.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int munmap(caddr_t addr, size_t len);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{addr : } l'origine de la zone mémoire à enlever de la mémoire.
	\item \emph{len : } Nombre de bytes à enlever de la mémoire.
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{0 : } en cas de succès.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Détruit la mise en mémoire entre un fichier et l'espace adressé en mémoire virtuelle. Pour fermer un fichier, n'appeler surtout pas munmap. 
\subsection{Msync()}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/types.h>
	\item #include <sys/mman.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int msync(caddr_t addr, size_t len, int flags);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{addr : } l'origine de la zone mémoire à enlever de la mémoire.
	\item \emph{len : } Nombre de bytes à enlever de la mémoire.
	\item \emph{flags : } MS_ASYNC (retourne immédiatement), MS_INVALIDATE (permet d'invalider le "catching").
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{0 : } en cas de succès.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Force le système à écrire les données mappées sur le disque.
\subsection{Link()}
\paragraph{Include : }
\begin{itemize}
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int link(const char * name1, const char * name2);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{name2 : } devient un autre nom pour l'objet déjà existant (name1). (Il s'agit donc juste d'un raccourci).
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{0 : } en cas de succès.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Name1 et Name2 auront donc la même inode. (Il n'y a donc aucun moyen de savoir lequel des deux est le nom originel).
\subsection{Unlink()}
\paragraph{Include : }
\begin{itemize}
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int unlink(const char * name);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{name : } sera supprimer du répertoire courant (si il s'agit de la dernière référence de l'objet, celui-ci sera également supprimé).
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{0 : } en cas de succès.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
La permision en écriture est nécéssaire sur le répertoire parent. 
\subsection{Symlink()}
\paragraph{Include : }
\begin{itemize}
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int symlink(const char * name1, const char * name2);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{name2 : } sera un lien symbolique de l'objet référencé par name1.
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{0 : } en cas de succès.
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Similaire au lien physiques sans les limitations des frontières du sytème de fichier.
\subsection{Readlink()}
\paragraph{Include : }
\begin{itemize}
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int readlink(const char * path, void * buf, size_t bufsize);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{buf : } où mettre le résultat.
	\item \emph{bufsize : } la taille du buffer.
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{ret : } la longueur utilisée du buffer. 
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Lit la valeur d'un lien symbolique.
\subsection{Stat()}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/types.h>
	\item #include <sys/stat.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int stat(const char * path, struct stat * buf); => retourne des informations au sujet d'un fichier.
	\item int lstat(const char * path, struct stat * buf); => retourne des informations au sujet du lien symbolique lui même.
	\item int fstat(int fd, struct stat * buf); => retourne des informations au sujet de l'objet pointé par le lien symbolique. 
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{buf : } pointeur vers une structure de type stat.
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{ret : } les informations au sujet de l'objet spécifié. 
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\subsection{Rename()}
\paragraph{Include : }
\begin{itemize}
	\item #include <stdio.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int rename(const char * old, const char * new);
\end{itemize}
\paragraph{Retour : }
\begin{itemize}
	\item \emph{ret : } la longueur utilisée du buffer. 
	\item \emph{-1 : } une erreur est apparue.
\end{itemize}
\paragraph{Remarques : }
Permet de remplacer l'ancien nom de fichier par le nouveau.
\subsection{flock()}
\paragraph{Include : }
\begin{itemize}
	\item #include <sys/files.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int flock(int fd, int operation);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{operation : } peut prendre les valeurs : (LOCK_SH qui signifie cadenas partagé (peut être utilisé par plus d'un processus), LOCK_EX qui signifie cadenas exclusif (peut être utilisé par un seul processus), LOCK_NB qui signifie que l'on ne doit pas bloqué lorsque le cadenas est pris (retournera -1 dans le cas où les fichier est bloqué) et LOCK_UN qui permet de délocker une ressource. 
\end{itemize}
\subsection{Lockf()}
\paragraph{Include : }
\begin{itemize}
	\item #include <unistd.h>
\end{itemize}
\paragraph{Déclarations : }
\begin{itemize}
	\item int lockf(int fd, int cmd, off_t len);
\end{itemize}
\paragraph{Explication des paramètres : }
\begin{itemize}
	\item \emph{fd : } "file descriptor".
	\item \emph{cmd : } peut prendre les valeurs : F_LOCK (permet de placer le cadenas), F_TLOCK (permet de placer le cadenas et de retourner 0 ou -1), F_ULOCK (permet de nettoyer le cadenas, de le remettre à zéro) et F_TEST (permet de tester le cadenas).
	\item \emph{len :} longueur de la zone à placer sous cadenas.
\end{itemize}
\end{document}
